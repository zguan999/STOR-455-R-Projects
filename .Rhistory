full.lm = lm(bwt ~ X1 + X2 + X3 + X4 +X5 + X6, data=bbycomp)
summary(full.lm)
anova(full.lm)
anova(x1.lm,x1_6.lm)
anova(x1_6.lm,x1_6_4.lm)
anova(x1_6_4.lm,x1_6_4_2.lm)
anova(x1_6_4_2.lm,x1_6_4_2_5.lm)
rm
?par
laptops = read.csv("http://kbodwin.web.unc.edu/files/2016/10/laptops.csv")
summary(laptops)
View(laptops)
View(laptops)
for(i in 1:ncol(laptops)){
#par(ask = TRUE)
plot(laptops[,i], xlab = names(laptops)[i])
}
for(i in 1:ncol(laptops)){
par(ask = TRUE)
plot(laptops[,i], xlab = names(laptops)[i])
}
?class
class(laptops$Max.Horizontal.Resolution)
for(i in 1:ncol(laptops)){
par(ask = TRUE)
plot(laptops[,i],laptops$Price, xlab = names(laptops)[i],ylab = "price")
}
#class(laptops$Max.Horizontal.Resolution)
for(i in 1:ncol(laptops)){
par(ask = TRUE)
plot(laptops[,i],laptops$Price, xlab = names(laptops)[i],ylab = "price")
}
laptops = read.csv("http://kbodwin.web.unc.edu/files/2016/10/laptops.csv")
summary(laptops)
for(i in 1:ncol(laptops)){
par(ask = TRUE)
plot(laptops[,i], xlab = names(laptops)[i])
}
#class(laptops$Max.Horizontal.Resolution)
for(i in 1:ncol(laptops)){
#par(ask = TRUE)
plot(laptops[,i],laptops$Price, xlab = names(laptops)[i],ylab = "price")
}
#class(laptops$Max.Horizontal.Resolution)
for(i in 1:ncol(laptops)){
par(ask = TRUE)
plot(laptops[,i],laptops$Price, xlab = names(laptops)[i],ylab = "price")
}
# a
#lm_a = lm(Price ~ Subwoofer, data = laptops)
# b
lm_b = lm(Price ~ Max.Horizontal.Resolution^2, data = laptops)
summary(lm_b)
# c
lm_c = lm(Price ~ Manufacturer + Operating.System, data = laptops)
# d
lm_d1 = lm(Price ~ Processor.Speed+Processor, data = laptops)
lm_d2 = lm(Price ~ Processor.Speed*Processor, data = laptops)
# a
#lm_a = lm(Price ~ Subwoofer, data = laptops)
# b
lm_b = lm(Price ~ Max.Horizontal.Resolution^2, data = laptops)
summary(lm_b)
# c
lm_c = lm(Price ~ Manufacturer + Operating.System, data = laptops)
summary(lm_c)
# d
lm_d1 = lm(Price ~ Processor.Speed+Processor, data = laptops)
lm_d2 = lm(Price ~ Processor.Speed*Processor, data = laptops)
# a
#lm_a = lm(Price ~ Subwoofer, data = laptops)
# b
lm_b = lm(Price ~ Max.Horizontal.Resolution^2, data = laptops)
summary(lm_b)
# c
lm_c = lm(Price ~ Manufacturer + Operating.System, data = laptops)
summary(lm_c)
# d
lm_d1 = lm(Price ~ Processor.Speed+Processor, data = laptops)
summary(lm_d1)
lm_d2 = lm(Price ~ Processor.Speed*Processor, data = laptops)
summary(lm_d2)
lm_3 = lm(Price ~ Port.Replicator + Bluetooth + Manufacturer, data = laptops)
lm_3 = lm(Price ~ Port.Replicator + Bluetooth + Manufacturer, data = laptops)
summary(lm_3)
lm_3 = lm(Price ~ Port.Replicator + Bluetooth , data = laptops)
summary(lm_3)
lm_3 = lm(Price ~ Port.Replicator + Bluetooth + Manufacturer, data = laptops)
summary(lm_3)
lm_3 = lm(Price ~  Bluetooth + Manufacturer, data = laptops)
summary(lm_3)
lm_3 = lm(Price ~ Port.Replicator + Bluetooth + Manufacturer, data = laptops)
summary(lm_3)
lm_3 = lm(Price ~ Port.Replicator + Bluetooth , data = laptops)
summary(lm_3)
lm_3 = lm(Price ~ Port.Replicator + Manufacturer , data = laptops)
summary(lm_3)
lm_3 = lm(Price ~ Port.Replicator + Bluetooth + Manufacturer , data = laptops)
summary(lm_3)
lm_3 = lm(Price ~  Bluetooth + Manufacturer , data = laptops)
summary(lm_3)
lm_3 = lm(Price ~ Port.Replicator + Bluetooth + Manufacturer , data = laptops)
summary(lm_3)
lm_3 = lm(Price ~ Port.Replicator + Bluetooth  , data = laptops)
summary(lm_3)
lm_3 = lm(Price ~  Bluetooth + Manufacturer , data = laptops)
summary(lm_3)
lm_3 = lm(Price ~ Port.Replicator  + Manufacturer , data = laptops)
summary(lm_3)
lm_3 = lm(Price ~ Port.Replicator + Bluetooth + Manufacturer , data = laptops)
summary(lm_3)
lm_3 = lm(Price ~ Port.Replicator + Manufacturer , data = laptops)
summary(lm_3)
lm_3 = lm(Price ~ Port.Replicator + Bluetooth + Manufacturer , data = laptops)
summary(lm_3)
YOUR CODE HERE
lm_2= lm(Price ~  Bluetooth + Manufacturer , data = laptops)
summary(lm_2)
#Based on the 3 predictors, the t-values are not significant for the manufacturer predictor. However, when removing manufacturer as a predictor, the adjusted r-squared decreases by over 20%.
#removing one variable each time, port replicator had the highest signifcance each time, but the adjusted r-squared of port and manufacturer to price was lower than including bluetooth. In the end, although Port has more significance, to maximize the Adjusted R-Squared, Blue tooth and Manufacturer should stay.
# a
#lm_a = lm(Price ~ Subwoofer, data = laptops)
# b
lm_b = lm(Price ~ Max.Horizontal.Resolution^2, data = laptops)
summary(lm_b)
# c
lm_c = lm(Price ~ Manufacturer + Operating.System, data = laptops)
summary(lm_c)
# d
lm_d1 = lm(Price ~ Processor.Speed+Processor, data = laptops)
summary(lm_d1)
lm_d2 = lm(Price ~ Processor.Speed*Processor, data = laptops)
summary(lm_d2)
# a
#lm_a = lm(Price ~ Subwoofer, data = laptops)
# b
lm_b = lm(Price ~ Max.Horizontal.Resolution^2, data = laptops)
summary(lm_b)
# c
lm_c = lm(Price ~ Manufacturer + Operating.System, data = laptops)
summary(lm_c)
plot(lm_c)
# d
lm_d1 = lm(Price ~ Processor.Speed+Processor, data = laptops)
summary(lm_d1)
lm_d2 = lm(Price ~ Processor.Speed*Processor, data = laptops)
summary(lm_d2)
# a
#lm_a = lm(Price ~ Subwoofer, data = laptops)
# b
lm_b = lm(Price ~ Max.Horizontal.Resolution^2, data = laptops)
summary(lm_b)
# c
lm_c = lm(Price ~ Manufacturer + Operating.System, data = laptops)
summary(lm_c)
plot(lm_c)
# d
lm_d1 = lm(Price ~ Processor.Speed+Processor, data = laptops)
summary(lm_d1)
lm_d2 = lm(Price ~ Processor.Speed*Processor, data = laptops)
summary(lm_d2)
YOUR CODE HERE
man = lm(Price ~ Manufacturer , data = laptops)
summary(man)
man = lm(Price ~ Manufacturer , data = laptops)
summary(man)
os = lm(Price ~ Operating.System, data = laptops)
summary(os)
man = lm(Price ~ Manufacturer , data = laptops)
summary(man)
os = lm(Price ~ Operating.System^2, data = laptops)
summary(os)
man = lm(Price ~ Manufacturer , data = laptops)
summary(man)
os = lm(Price ~ Operating.System, data = laptops)
summary(os)
install.packages("VIF")
#Install vif package
require("car")
# Get rid of identified useless variables
bad = c("Port.Replicator", "Subwoofer", "CDMA")
lt = laptops[, !(names(laptops) %in% bad)]
?require()
#Install vif package
require("vif")
# Get rid of identified useless variables
bad = c("Port.Replicator", "Subwoofer", "CDMA")
lt = laptops[, !(names(laptops) %in% bad)]
#Install vif package
require("car")
# Get rid of identified useless variables
bad = c("Port.Replicator", "Subwoofer", "CDMA")
lt = laptops[, !(names(laptops) %in% bad)]
install.packages("VIF")
#Install vif package
require("vif")
# Get rid of identified useless variables
bad = c("Port.Replicator", "Subwoofer", "CDMA")
lt = laptops[, !(names(laptops) %in% bad)]
#Install vif package
require("VIF")
# Get rid of identified useless variables
bad = c("Port.Replicator", "Subwoofer", "CDMA")
lt = laptops[, !(names(laptops) %in% bad)]
#Install vif package
require("car")
# Get rid of identified useless variables
bad = c("Port.Replicator", "Subwoofer", "CDMA")
lt = laptops[, !(names(laptops) %in% bad)]
lm_4 = lm(Price ~ .-Operating.System, data = lt)
vif(lm_4)
#Install vif package
#require("car")
# Get rid of identified useless variables
bad = c("Port.Replicator", "Subwoofer", "CDMA")
lt = laptops[, !(names(laptops) %in% bad)]
lm_4 = lm(Price ~ .-Operating.System, data = lt)
vif(lm_4)
View(lt)
View(lt)
#Install vif package
require("car")
# Get rid of identified useless variables
bad = c("Port.Replicator", "Subwoofer", "CDMA")
lt = laptops[, !(names(laptops) %in% bad)]
install.packages("car")
library("car", lib.loc="~/R/win-library/3.5")
#Install vif package
require("car")
# Get rid of identified useless variables
bad = c("Port.Replicator", "Subwoofer", "CDMA")
lt = laptops[, !(names(laptops) %in% bad)]
lm_4 = lm(Price ~ .-Operating.System, data = lt)
vif(lm_4)
View(lt)
View(lt)
lm_4 = lm(Price ~ .-Operating.System, data = lt)
vif(lt)
lm_4 = lm(Price ~ .-Operating.System, data = lt)
vif(lml_4)
lm_4 = lm(Price ~ .-Operating.System, data = lt)
vif(lm_4)
library(car)
lm_4 = lm(Price ~ .-Operating.System, data = lt)
vif(lm_4)
lm_5 = lm(Price ~ .-Manufacturer, data = lt)
summary(lm_5)
vif(lm_5)
lm_6 = lm(Price ~ .-Operating.System, data = lt)
summary(lm_6)
vif(lm_6)
# a
#lm_a = lm(Price ~ Subwoofer, data = laptops)
# b
lm_b = lm(Price ~ Max.Horizontal.Resolution^2, data = laptops)
#summary(lm_b)
# c
lm_c = lm(Price ~ Manufacturer + Operating.System, data = laptops)
#summary(lm_c)
# d
lm_d1 = lm(Price ~ Processor.Speed+Processor, data = laptops)
summary(lm_d1)
lm_d2 = lm(Price ~ Processor.Speed*Processor, data = laptops)
summary(lm_d2)
# a
#lm_a = lm(Price ~ Subwoofer, data = laptops)
# b
lm_b = lm(Price ~ Max.Horizontal.Resolution^2, data = laptops)
#summary(lm_b)
# c
lm_c = lm(Price ~ Manufacturer + Operating.System, data = laptops)
summary(lm_c)
# d
lm_d1 = lm(Price ~ Processor.Speed+Processor, data = laptops)
summary(lm_d1)
lm_d2 = lm(Price ~ Processor.Speed*Processor, data = laptops)
summary(lm_d2)
# a
#lm_a = lm(Price ~ Subwoofer, data = laptops)
# b
lm_b = lm(Price ~ Max.Horizontal.Resolution^2, data = laptops)
summary(lm_b)
# c
lm_c = lm(Price ~ Manufacturer + Operating.System, data = laptops)
summary(lm_c)
# d
lm_d1 = lm(Price ~ Processor.Speed+Processor, data = laptops)
summary(lm_d1)
lm_d2 = lm(Price ~ Processor.Speed*Processor, data = laptops)
summary(lm_d2)
# a
lm_a = lm(Price ~ Subwoofer, data = laptops)
# a
#lm_a = lm(Price ~ Subwoofer, data = laptops)
# b
lm_b = lm(Price ~ Max.Horizontal.Resolution^2, data = laptops)
summary(lm_b)
# c
lm_c = lm(Price ~ Manufacturer + Operating.System, data = laptops)
summary(lm_c)
# d
lm_d1 = lm(Price ~ Processor.Speed+Processor, data = laptops)
summary(lm_d1)
lm_d2 = lm(Price ~ Processor.Speed*Processor, data = laptops)
summary(lm_d2)
lm_5 = lm(Price ~ .-Manufacturer, data = lt)
anova(lm_5)
vif(lm_5)
lm_6 = lm(Price ~ .-Operating.System, data = lt)
anova(lm_6)
vif(lm_6)
install.packages("leaps")
?regsubsets()
library("leaps", lib.loc="~/R/win-library/3.5")
?regsubsets()
regsubsets(Price~ Max.Horizontal.Resolution + Memory.Technology + Installed.Memory + Processor.Speed + Processor + Infared + Bluetooth + Docking.Station + Fingerprint + External.Battery + Operating.System + Warranty.Days)
regsubsets(Price~ Max.Horizontal.Resolution + Memory.Technology + Installed.Memory + Processor.Speed + Processor + Infared + Bluetooth + Docking.Station + Fingerprint + External.Battery + Operating.System + Warranty.Days, data = lt, scale = "adjr2", method = "backward")
regsubsets(Price~ Max.Horizontal.Resolution + Memory.Technology + Installed.Memory + Processor.Speed + Processor + Infrared + Bluetooth + Docking.Station + Fingerprint + External.Battery + Operating.System + Warranty.Days, data = lt, scale = "adjr2", method = "forward")
something = regsubsets(Price~ Max.Horizontal.Resolution + Memory.Technology + Installed.Memory + Processor.Speed + Processor + Infrared + Bluetooth + Docking.Station + Fingerprint + External.Battery + Operating.System + Warranty.Days, data = lt, scale = "adjr2", method = "forward")
something = regsubsets(Price~ Max.Horizontal.Resolution + Memory.Technology + Installed.Memory + Processor.Speed + Processor + Infrared + Bluetooth + Docking.Station + Fingerprint + External.Battery + Operating.System + Warranty.Days, data = lt, scale = "adjr2", method = "forward")
complete = lt[complete.cases(lt),]
something = regsubsets(Price~ Max.Horizontal.Resolution + Memory.Technology + Installed.Memory + Processor.Speed + Processor + Infrared + Bluetooth + Docking.Station + Fingerprint + External.Battery + Operating.System + Warranty.Days, data = complete, scale = "adjr2", method = "forward")
View(complete)
View(complete)
complete = lt[Max.Horizontal.Resolution !="?",]
complete = lt[lt$Max.Horizontal.Resolution !="?",]
something = regsubsets(Price~ Max.Horizontal.Resolution + Memory.Technology + Installed.Memory + Processor.Speed + Processor + Infrared + Bluetooth + Docking.Station + Fingerprint + External.Battery + Operating.System + Warranty.Days, data = complete, scale = "adjr2", method = "forward")
something = regsubsets(Price ~ Max.Horizontal.Resolution + Memory.Technology + Installed.Memory + Processor.Speed + Processor + Infrared + Bluetooth + Docking.Station + Fingerprint + External.Battery + Operating.System + Warranty.Days, data = lt, method = "forward")
something = regsubsets(Price ~ Max.Horizontal.Resolution + Memory.Technology + Installed.Memory + Processor.Speed + Processor + Infrared + Bluetooth + Docking.Station + Fingerprint + External.Battery + Operating.System + Warranty.Days, data = lt, method = "forward")
plot(something,scale="adjr2")
exhaust = regsubsets(Price ~ Max.Horizontal.Resolution + Memory.Technology + Installed.Memory + Processor.Speed + Processor + Infrared + Bluetooth + Docking.Station + Fingerprint + External.Battery + Operating.System + Warranty.Days, data = lt, method = "forward")
plot(exhaust,scale="adjr2")
exhaust = regsubsets(Price ~ Max.Horizontal.Resolution + Memory.Technology + Installed.Memory + Processor.Speed + Processor + Infrared + Bluetooth + Docking.Station + Fingerprint + External.Battery + Operating.System + Warranty.Days, data = lt, method = "exhaustive")
plot(exhaust,scale="adjr2")
exhaust = regsubsets(Price ~ Max.Horizontal.Resolution + Memory.Technology + Installed.Memory + Processor.Speed + Processor + Infrared + Bluetooth + Docking.Station + Fingerprint + External.Battery + Operating.System + Warranty.Days, data = lt, method = "exhaustive")
plot(exhaust,scale="cp")
exhaust = regsubsets(Price ~ Max.Horizontal.Resolution + Memory.Technology + Installed.Memory + Processor.Speed + Processor + Infrared + Bluetooth + Docking.Station + Fingerprint + External.Battery + Operating.System + Warranty.Days, data = lt, method = "exhaustive")
plot(exhaust,scale="m.cp")
exhaust = regsubsets(Price ~ Max.Horizontal.Resolution + Memory.Technology + Installed.Memory + Processor.Speed + Processor + Infrared + Bluetooth + Docking.Station + Fingerprint + External.Battery + Operating.System + Warranty.Days, data = lt, method = "exhaustive")
plot(exhaust,scale="Mallow Cp")
exhaust = regsubsets(Price ~ Max.Horizontal.Resolution + Memory.Technology + Installed.Memory + Processor.Speed + Processor + Infrared + Bluetooth + Docking.Station + Fingerprint + External.Battery + Operating.System + Warranty.Days, data = lt, method = "exhaustive")
plot(exhaust,scale="cp")
exhaust = regsubsets(Price ~ Max.Horizontal.Resolution + Memory.Technology + Installed.Memory + Processor.Speed + Processor + Infrared + Bluetooth + Docking.Station + Fingerprint + External.Battery + Operating.System + Warranty.Days, data = lt, method = "exhaustive")
plot(exhaust,scale="Cp")
predict(lm_6)
lm_5 = lm(Price ~ .-Manufacturer, data = lt)
anova(lm_5)
vif(lm_5)
lm_6 = lm(Price ~ .-Operating.System, data = lt)
anova(lm_6)
vif(lm_6)
something = regsubsets(Price ~  Installed.Memory + Processor.Speed + Infrared + Bluetooth + Docking.Station + Fingerprint + External.Battery + Operating.System + Warranty.Days, data = lt, method = "forward")
plot(something,scale="adjr2")
something = regsubsets(Price ~  Infrared + Bluetooth + Docking.Station + Fingerprint + External.Battery + Operating.System + Warranty.Days, data = lt, method = "forward")
plot(something,scale="adjr2")
exhaust = regsubsets(Price ~  Infrared + Bluetooth + Docking.Station + Fingerprint + External.Battery + Operating.System + Warranty.Days, data = lt, method = "exhaustive")
plot(exhaust,scale="Cp")
something = regsubsets(Price ~ Installed.Memory + Processor.Speed + Infrared + Bluetooth + Docking.Station + Fingerprint + External.Battery + Operating.System + Warranty.Days, data = lt, method = "forward")
plot(something,scale="adjr2")
exhaust = regsubsets(Price ~Installed.Memory + Processor.Speed + Infrared + Bluetooth + Docking.Station + Fingerprint + External.Battery + Operating.System + Warranty.Days, data = lt, method = "exhaustive")
plot(exhaust,scale="Cp")
something = regsubsets(Price ~ Installed.Memory + Processor.Speed + Infrared + Bluetooth + External.Battery + Operating.System + Warranty.Days, data = lt, method = "forward")
plot(something,scale="adjr2")
something = regsubsets(Price ~ Installed.Memory + Processor.Speed + Infrared + Bluetooth + Docking.Station + Fingerprint + External.Battery + Operating.System + Warranty.Days, data = lt, method = "forward")
plot(something,scale="adjr2")
something = regsubsets(Price ~ Installed.Memory + Processor.Speed + Infrared + Bluetooth + External.Battery + Operating.System + Warranty.Days, data = lt, method = "forward")
plot(something,scale="adjr2")
exhaust = regsubsets(Price ~Installed.Memory + Processor.Speed +Infrared + Bluetooth  + External.Battery + Operating.System + Warranty.Days, data = lt, method = "exhaustive")
plot(exhaust,scale="Cp")
exhaust = regsubsets(Price ~Installed.Memory + Processor.Speed +Infrared + Bluetooth + Docking.Station + Fingerprint + External.Battery + Operating.System + Warranty.Days, data = lt, method = "exhaustive")
plot(exhaust,scale="Cp")
something = regsubsets(Price ~ Installed.Memory + Processor.Speed + Infrared + Bluetooth + Docking.Station + Fingerprint + External.Battery + Operating.System + Warranty.Days, data = lt, method = "forward")
plot(something,scale="adjr2")
exhaust = regsubsets(Price ~Installed.Memory + Processor.Speed+Infrared + Bluetooth + Docking.Station + Fingerprint + External.Battery + Operating.System + Warranty.Days, data = lt, method = "exhaustive")
plot(exhaust,scale="Cp")
exhaust = regsubsets(Price ~Installed.Memory + Processor.Speed+Infrared + Bluetooth  + External.Battery + Operating.System + Warranty.Days, data = lt, method = "exhaustive")
plot(exhaust,scale="Cp")
pred= predict(lm_6)
plot(pred)
pred= predict(lm_6)
plot(lt$price,pred)
pred= predict(lm_6)
plot(lt$Price,pred)
lm_new = lm(Price ~Installed.Memory + Processor.Speed+Infrared + Bluetooth  + External.Battery + Operating.System + Warranty.Days, data = lt)
pred= predict(lm_new)
plot(lt$Price,pred)
plot(lm_new)
plot(lm_new)
summary(lm_new)
library("car", lib.loc="~/R/win-library/3.5")
library("leaps", lib.loc="~/R/win-library/3.5")
#Install vif package
require("car")
# Get rid of identified useless variables
bad = c("Port.Replicator", "Subwoofer", "CDMA")
lt = laptops[, !(names(laptops) %in% bad)]
library(car)
lm_4 = lm(Price ~ .-Operating.System, data = lt)
vif(lm_4)
lm_5 = lm(Price ~ .-Manufacturer, data = lt)
anova(lm_5)
vif(lm_5)
lm_6 = lm(Price ~ .-Operating.System, data = lt)
anova(lm_6)
vif(lm_6)
something = regsubsets(Price ~ Installed.Memory + Processor.Speed + Infrared + Bluetooth + Docking.Station + Fingerprint + External.Battery + Operating.System + Warranty.Days, data = lt, method = "forward")
plot(something,scale="adjr2")
exhaust = regsubsets(Price ~Installed.Memory + Processor.Speed+Infrared + Bluetooth  + External.Battery + Operating.System + Warranty.Days, data = lt, method = "exhaustive")
plot(exhaust,scale="Cp")
lm_new = lm(Price ~Installed.Memory + Processor.Speed+Infrared + Bluetooth  + External.Battery + Operating.System + Warranty.Days, data = lt)
pred= predict(lm_new)
plot(lt$Price,pred)
plot(lm_new)
summary(lm_new)
plot(lm_new)
summary(lm_new)
no_apple = laptops[laptops$Manufacturer != "Apple",]
app_lm = lm(Price ~ Installed.Memory + Processor.Speed + Infrared + Bluetooth + External.Battery + Warranty.Days, data = no_apple)
summary(app_lm)
summary(lm_new)
no_apple = laptops[laptops$Manufacturer != "Apple",]
app_lm = lm(Price ~ Installed.Memory + Processor.Speed + Infrared + Bluetooth + External.Battery + Warranty.Days, data = no_apple)
Manu_lm = lm(Price ~ Installed.Memory + Processor.Speed:Manufacturer + Infrared + Bluetooth + External.Battery + Warranty.Days, data = lt)
summary(app_lm)
summary(lm_new)
no_apple = laptops[laptops$Manufacturer != "Apple",]
app_lm = lm(Price ~ Installed.Memory + Processor.Speed + Infrared + Bluetooth + External.Battery + Warranty.Days, data = no_apple)
Manu_lm = lm(Price ~ Installed.Memory + Processor.Speed:Manufacturer + Infrared + Bluetooth + External.Battery + Warranty.Days, data = lt)
summary(Manu_lm)
summary(app_lm)
summary(lm_new)
library("car", lib.loc="~/R/win-library/3.5")
library("leaps", lib.loc="~/R/win-library/3.5")
no_apple = laptops[laptops$Manufacturer != "Apple",]
app_lm = lm(Price ~ Installed.Memory + Processor.Speed + Infrared + Bluetooth + External.Battery + Warranty.Days, data = no_apple)
Manu_lm = lm(Price ~ Installed.Memory + Processor.Speed:Manufacturer + Infrared + Bluetooth + External.Battery + Warranty.Days, data = lt)
summary(Manu_lm)
summary(app_lm)
summary(lm_new)
vif(Manu_lm)
no_apple = laptops[laptops$Manufacturer != "Apple",]
app_lm = lm(Price ~ Installed.Memory + Processor.Speed + Infrared + Bluetooth + External.Battery + Warranty.Days, data = no_apple)
Manu_lm = lm(Price ~ Installed.Memory + Processor.Speed:Manufacturer + Infrared + Bluetooth + External.Battery + Warranty.Days, data = lt)
summary(Manu_lm)
summary(app_lm)
summary(lm_new)
vif(Manu_lm)
no_apple = laptops[laptops$Manufacturer != "Apple",]
app_lm = lm(Price ~ Installed.Memory + Processor.Speed + Infrared + Bluetooth + External.Battery + Warranty.Days+ Manufacturer, data = no_apple)
Manu_lm = lm(Price ~ Installed.Memory + Processor.Speed:Manufacturer + Infrared + Bluetooth + External.Battery + Warranty.Days, data = lt)
summary(Manu_lm)
summary(app_lm)
summary(lm_new)
vif(Manu_lm)
no_apple = laptops[laptops$Manufacturer != "Apple",]
app_lm = lm(Price ~ Installed.Memory + Processor.Speed + Infrared + Bluetooth + External.Battery + Warranty.Days+ Manufacturer+Operating.System, data = no_apple)
no_apple = laptops[laptops$Manufacturer != "Apple",]
app_lm = lm(Price ~ Installed.Memory + Processor.Speed + Infrared + Bluetooth + External.Battery + Warranty.Days+ Manufacturer, data = no_apple)
Manu_lm = lm(Price ~ Installed.Memory + Processor.Speed:Manufacturer + Infrared + Bluetooth + External.Battery + Warranty.Days, data = lt)
summary(Manu_lm)
summary(app_lm)
summary(lm_new)
vif(Manu_lm)
no_apple = laptops[laptops$Manufacturer != "Apple",]
app_lm = lm(Price ~ Installed.Memory + Processor.Speed + Infrared + Bluetooth + External.Battery + Warranty.Days+ Manufacturer, data = no_apple)
Manu_lm = lm(Price ~ Installed.Memory + Manufacturer:Processor.Speed + Infrared + Bluetooth + External.Battery + Warranty.Days, data = lt)
summary(Manu_lm)
summary(app_lm)
summary(lm_new)
vif(Manu_lm)
no_apple = laptops[laptops$Manufacturer != "Apple",]
app_lm = lm(Price ~ Installed.Memory + Processor.Speed + Infrared + Bluetooth + External.Battery + Warranty.Days+ Manufacturer, data = no_apple)
Manu_lm = lm(Price ~ Installed.Memory + Manufacturer:Processor.Speed + Infrared + Bluetooth + External.Battery + Warranty.Days, data = lt)
summary(app_lm)
summary(lm_new)
summary(Manu_lm)
vif(Manu_lm)
no_apple = laptops[laptops$Manufacturer != "Apple",]
app_lm = lm(Price ~ Installed.Memory + Processor.Speed + Infrared + Bluetooth + External.Battery + Warranty.Days+ Manufacturer, data = no_apple)
appy_lm = lm(Price ~ Installed.Memory + Processor.Speed + Infrared + Bluetooth + External.Battery + Warranty.Days+ Manufacturer, data = lt)
Manu_lm = lm(Price ~ Installed.Memory + Manufacturer:Processor.Speed + Infrared + Bluetooth + External.Battery + Warranty.Days, data = lt)
summary(app_lm)
summary(lm_new)
summary(Manu_lm)
vif(Manu_lm)
no_apple = laptops[laptops$Manufacturer != "Apple",]
app_lm = lm(Price ~ Installed.Memory + Processor.Speed + Infrared + Bluetooth + External.Battery + Warranty.Days+ Manufacturer, data = no_apple)
appy_lm = lm(Price ~ Installed.Memory + Processor.Speed + Infrared + Bluetooth + External.Battery + Warranty.Days+ Manufacturer, data = lt)
Manu_lm = lm(Price ~ Installed.Memory + Manufacturer:Processor.Speed + Infrared + Bluetooth + External.Battery + Warranty.Days, data = lt)
summary(app_lm)
summary(appy_lm)
summary(lm_new)
summary(Manu_lm)
vif(Manu_lm)
detach("package:leaps", unload=TRUE)
library("leaps", lib.loc="~/R/win-library/3.5")
require(leaps)
something = regsubsets(Price ~ Installed.Memory + Processor.Speed + Infrared + Bluetooth + Docking.Station + Fingerprint + External.Battery + Operating.System + Warranty.Days, data = lt, method = "forward")
plot(something,scale="adjr2")
?sum
time<-c(2,4,6,8,10,12,14,16,18,20,22,24,26)
weight<-c(0.08,1.12,4.43,4.98,4.92,7.18,5.57,8.40,8.81,10.81,10.81,11.16,10.12,13.12,15.04)
for(i in 1;ncol(time)){ sum += (time[,i] - 15)^2
for(i in 1:ncol(time)){ sum += (time[,i] - 15)^2
for(i in 1:ncol(time)){ sum += (time[,i] - 15)^2 }
for(i in 1:ncol(time)){ (time[,i] - 15)^2 }
View(laptops)
View(laptops)
for(i in 1:ncol(laptops)){
par(ask = TRUE)
plot(laptops[,i], xlab = names(laptops)[i])
}
